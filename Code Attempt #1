import pandas as pd
import torch
import matplotlib.pyplot as plt
import matplotlib           
import numpy as np

A = torch.tensor([[1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     1], #AB
                  [1,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0], #BC
                  [1,     1,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0], #MB
                  [0,     0,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0], #NB
                  [0,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     0,     0], #NL
                  [0,     1,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     1], #NT
                  [0,     0,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     0], #NS
                  [0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     1], #NU
                  [1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1], #ON
                  [0,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     0,     0], #PE
                  [1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1], #QC
                  [1,     1,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0], #SK
                  [1,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     0,     1]]); #YT

def SEImodel(theta,S,E,I):
    alpha = theta[0]
    beta  = theta[1]
    gamma = theta[2]
    mu    = theta[3]
    kE    = theta[4]
    kS    = theta[5]
    kI    = theta[6]
    
   dSdt = -kSLS
    
    return dSdt, dEdt, dIdt


def integrateSEI(theta,S0,E0,I0,dt,nt):
    
    # vectors to save the results over time
    Sout = torch.zeros(nt+1); Sout[0] = S0
    Eout = torch.zeros(nt+1); Eout[0] = E0
    Iout = torch.zeros(nt+1); Iout[0] = I0
    
    S = S0; E = E0; I = I0
    for i in range(nt):
        dSdt, dEdt, dIdt = SEImodel(theta,S,E,I)
        S += dt*dSdt
        E += dt*dEdt
        I += dt*dIdt
        
        Sout[i+1] = S; Eout[i+1] = E; Iout[i+1] = I;
       
    if I >= 0.05:
      print(S,E,I)
      return Sout, Eout, Iout
       
    return Sout, Eout, Iout
